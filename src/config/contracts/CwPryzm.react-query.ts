/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.33.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, GetCountResponse } from "./CwPryzm.types";
import { CwPryzmQueryClient, CwPryzmClient } from "./CwPryzm.client";
export const cwPryzmQueryKeys = {
  contract: ([{
    contract: "cwPryzm"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...cwPryzmQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getCount: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwPryzmQueryKeys.address(contractAddress)[0],
    method: "get_count",
    args
  }] as const)
};
export const cwPryzmQueries = {
  getCount: <TData = GetCountResponse,>({
    client,
    options
  }: CwPryzmGetCountQuery<TData>): UseQueryOptions<GetCountResponse, Error, TData> => ({
    queryKey: cwPryzmQueryKeys.getCount(client?.contractAddress),
    queryFn: () => client ? client.getCount() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface CwPryzmReactQuery<TResponse, TData = TResponse> {
  client: CwPryzmQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwPryzmGetCountQuery<TData> extends CwPryzmReactQuery<GetCountResponse, TData> {}
export function useCwPryzmGetCountQuery<TData = GetCountResponse>({
  client,
  options
}: CwPryzmGetCountQuery<TData>) {
  return useQuery<GetCountResponse, Error, TData>(cwPryzmQueryKeys.getCount(client?.contractAddress), () => client ? client.getCount() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwPryzmResetMutation {
  client: CwPryzmClient;
  msg: {
    count: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwPryzmResetMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwPryzmResetMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwPryzmResetMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.reset(msg, fee, memo, funds), options);
}
export interface CwPryzmIncrementMutation {
  client: CwPryzmClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwPryzmIncrementMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwPryzmIncrementMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwPryzmIncrementMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.increment(fee, memo, funds), options);
}